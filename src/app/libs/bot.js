const TelegramBot = require('node-telegram-bot-api')
const TOKEN = process.env.TELEGRAM_BOT_TOKEN
const bot = new TelegramBot(TOKEN)

module.exports = bot

{
	/*
	const chatId = msg.chat.id.toString()
	const text = msg.text || ''
	const startPayload = text.split(' ')[1]

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
	let user = await prisma.user.findUnique({
		where: { telegramId: chatId },
	})

	// –ï—Å–ª–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è
	if (text === startPayload) {
		let master = await prisma.specialist.findUnique({
			where: { userId: startPayload },
		})
		if (!user) {
			// –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
			user = await prisma.user.create({
				data: {
					telegramId: chatId,
					firstName: msg.from?.first_name || '',
					lastName: msg.from?.last_name || '',
					chatId: chatId.toString(),
					username: msg.from?.username || '',
				},
			})

			//bot.sendMessage(chatId, '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.')
		}

		// –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫ –º–∞—Å—Ç–µ—Ä—É
		const button = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: `–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É`,
							web_app: { url: `${webAppUrl}/profile_zapis/${startPayload}` }, // –°—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞
						},
					],
				],
			},
		}

		bot.sendMessage(
			chatId,
			`–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É <b>${master?.firstName} ${master?.lastName}</b>`,
			{
				reply_markup: button.reply_markup,
				parse_mode: 'HTML',
			}
		)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
	if (user) {
		const button = {
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
							web_app: { url: `${webAppUrl}` },
						},
					],
				],
			},
		}

		bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', button)
		return
	}

	// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ –∏ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤—ã–±—Ä–∞—Ç—å —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è
	user = await prisma.user.create({
		data: {
			telegramId: chatId,
			firstName: msg.from?.first_name || '',
			lastName: msg.from?.last_name || '',
			chatId: chatId.toString(),
			username: msg.from?.username || '',
		},
	})

	// –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—ã–±–æ—Ä–æ–º —Ç–∏–ø–∞ –ø—Ä–æ—Ñ–∏–ª—è
	const options = {
		reply_markup: {
			inline_keyboard: [
				[
					{ text: '–ö–ª–∏–µ–Ω—Ç', callback_data: 'client' },
					{ text: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', callback_data: 'specialist' },
				],
			],
		},
	}

	const photoWelcome = `${webAppUrl}/11.png`

	bot.sendPhoto(chatId, photoWelcome, {
		caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ú—ã —Ä–∞–¥—ã –≤–∏–¥–µ—Ç—å –≤–∞—Å –≤ –Ω–∞—à–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –æ–Ω–ª–∞–π–Ω –∑–∞–ø–∏—Å–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`,
		reply_markup: options.reply_markup,
	})
	*/
}
