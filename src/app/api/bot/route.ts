import { NextResponse } from 'next/server'
import TelegramBot from 'node-telegram-bot-api'
import prisma from '@/app/libs/prismadb'

const bot = new TelegramBot('7655736393:AAGYAPPjBo1WWKhAXtcUMj0FsTWH35Y7D8g')
const botUsername = 'naznach_twa_bot'
const webAppUrl = 'https://naznach.vercel.app'

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–µ–±—Ö—É–∫ –Ω–∞ —ç—Ç–æ—Ç –º–∞—Ä—à—Ä—É—Ç
bot.setWebHook(`https://naznach.vercel.app/api/bot`)

export async function POST(req: Request) {
	try {
		const body = await req.json()
		const { message, callback_query } = body

		if (message) {
			const chatId = message.chat.id.toString()
			const text = message.text || ''
			const startPayload = text.split(' ')[1] || null

			// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
			let user = await prisma.user.findUnique({
				where: { telegramId: chatId },
			})

			if (startPayload) {
				// –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω payload, –∏—â–µ–º –º–∞—Å—Ç–µ—Ä–∞
				const master = await prisma.specialist.findUnique({
					where: { userId: startPayload },
				})

				if (!user) {
					// –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
					user = await prisma.user.create({
						data: {
							telegramId: chatId,
							firstName: message.from?.first_name || '',
							lastName: message.from?.last_name || '',
							chatId,
							username: message.from?.username || '',
						},
					})
				}

				if (master) {
					const button = {
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É',
										web_app: {
											url: `${webAppUrl}/profile_zapis/${startPayload}`,
										},
									},
								],
							],
						},
					}

					await bot.sendMessage(
						chatId,
						`–ó–∞–ø–∏—Å–∞—Ç—å—Å—è –∫ –º–∞—Å—Ç–µ—Ä—É <b>${master.firstName} ${master.lastName}</b>`,
						{ reply_markup: button.reply_markup, parse_mode: 'HTML' }
					)
				} else {
					await bot.sendMessage(chatId, '–ú–∞—Å—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω.')
				}

				return NextResponse.json({ success: true })
			}

			if (user) {
				const button = {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
									web_app: { url: `${webAppUrl}` },
								},
							],
						],
					},
				}

				await bot.sendMessage(chatId, '–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.', button)
				return NextResponse.json({ success: true })
			}

			// –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–æ–≤—ã–π, —Å–æ–∑–¥–∞—ë–º –µ–≥–æ
			user = await prisma.user.create({
				data: {
					telegramId: chatId,
					firstName: message.from?.first_name || '',
					lastName: message.from?.last_name || '',
					chatId,
					username: message.from?.username || '',
				},
			})

			const options = {
				reply_markup: {
					inline_keyboard: [
						[
							{ text: '–ö–ª–∏–µ–Ω—Ç', callback_data: 'client' },
							{ text: '–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç', callback_data: 'specialist' },
						],
					],
				},
			}

			const photoWelcome = `${webAppUrl}/11.png`

			await bot.sendPhoto(chatId, photoWelcome, {
				caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –ø—Ä–æ—Ñ–∏–ª—è, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å:`,
				reply_markup: options.reply_markup,
			})

			return NextResponse.json({ success: true })
		}

		if (callback_query) {
			const chatId = callback_query.message?.chat.id.toString()
			const telegramId = callback_query.from.id.toString()

			if (!chatId) {
				return NextResponse.json(
					{ error: 'chatId is missing' },
					{ status: 400 }
				)
			}

			const user = await prisma.user.findUnique({
				where: { telegramId },
			})

			if (!user) {
				await bot.sendMessage(
					chatId,
					'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å —Å–Ω–∞—á–∞–ª–∞.'
				)
				return NextResponse.json({ error: 'User not found' }, { status: 400 })
			}

			if (callback_query.data === 'client') {
				const profileOptions = {
					reply_markup: {
						inline_keyboard: [
							[
								{
									text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
									web_app: { url: `${webAppUrl}` },
								},
							],
						],
					},
				}
				const photoProfile = `${webAppUrl}/33.png`

				await bot.sendPhoto(chatId, photoProfile, {
					caption:
						'üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –∑–∞–ø–∏—Å–∏!\n\nüéØ –í—ã –º–æ–∂–µ—Ç–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞:\n\nüóìÔ∏è –ó–∞–ø–∏—Å—å –∫ –º–∞—Å—Ç–µ—Ä—É: –õ–µ–≥–∫–æ –∑–∞–ø–∏—Å—ã–≤–∞–π—Ç–µ—Å—å –∫ –Ω—É–∂–Ω–æ–º—É —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É –≤ —É–¥–æ–±–Ω–æ–µ –≤—Ä–µ–º—è.\nüîÑ –ü–µ—Ä–µ–∑–∞–ø–∏—Å—å: –ò–∑–º–µ–Ω—è–π—Ç–µ –¥–∞—Ç—É –∏–ª–∏ –≤—Ä–µ–º—è –≤–∞—à–µ–π –∑–∞–ø–∏—Å–∏, –µ—Å–ª–∏ —ç—Ç–æ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è.\n‚ùå –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏: –û—Ç–º–µ–Ω—è–π—Ç–µ –∑–∞–ø–∏—Å—å, –µ—Å–ª–∏ –≤–∞—à–∏ –ø–ª–∞–Ω—ã –∏–∑–º–µ–Ω–∏–ª–∏—Å—å.\n‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ:\n–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –ø—Ä—è–º–∞—è —Å—Å—ã–ª–∫–∞ –Ω–∞ –ø—Ä–æ—Ñ–∏–ª—å –º–∞—Å—Ç–µ—Ä–∞, –ª—É—á—à–µ –≤–æ—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –µ—é. –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –≤ –≤–∞—à–µ–º –ø—Ä–æ—Ñ–∏–ª–µ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–∞—Å—Ç–µ—Ä–æ–≤ –¥–ª—è –∑–∞–ø–∏—Å–∏.\n\nüìñ –ü–æ–¥—Ä–æ–±–Ω–µ–µ –æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —á–∏—Ç–∞–π—Ç–µ –≤ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n\n–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üöÄ',
					reply_markup: profileOptions.reply_markup,
				})
			}

			if (callback_query.data === 'specialist') {
				try {
					await prisma.user.update({
						where: { telegramId },
						data: { isMaster: true },
					})

					await prisma.specialist.create({
						data: {
							userId: user.telegramId,
							chatId,
							firstName: user.firstName,
							lastName: user.lastName,
							username: user.username,
							isMaster: true,
						},
					})

					const profileOptions = {
						reply_markup: {
							inline_keyboard: [
								[
									{
										text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
										web_app: { url: `${webAppUrl}` },
									},
								],
							],
						},
					}

					const photoProfile = `${webAppUrl}/22.png`

					await bot.sendPhoto(chatId, photoProfile, {
						caption: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, —É–≤–∞–∂–∞–µ–º—ã–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç!

üéâ –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –Ω–∞—à–∏–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–≤–æ–µ–π –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–π –¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç—å—é. –í–æ—Ç —á—Ç–æ –≤—ã —Å–º–æ–∂–µ—Ç–µ –¥–µ–ª–∞—Ç—å:

üóìÔ∏è –£–ø—Ä–∞–≤–ª—è—Ç—å –≥—Ä–∞—Ñ–∏–∫–æ–º —Ä–∞–±–æ—Ç—ã: –¥–æ–±–∞–≤–ª—è–π—Ç–µ, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ —Å–≤–æ–∏ —Ä–∞–±–æ—á–∏–µ —á–∞—Å—ã.
‚úçÔ∏è –ó–∞–ø–∏—Å—ã–≤–∞—Ç—å –∫–ª–∏–µ–Ω—Ç–æ–≤: —Å–ª–µ–¥–∏—Ç–µ –∑–∞ –∑–∞–ø–∏—Å—è–º–∏ –∏ —É–ø—Ä–∞–≤–ª—è–π—Ç–µ –∏–º–∏ –ø—Ä—è–º–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.
üîß –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: –æ–±–Ω–æ–≤–ª—è–π—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏ –ø—Ä–æ—Ñ–∏–ª—å.
‚ùå –û—Ç–º–µ–Ω—è—Ç—å –∏ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç—å –∑–∞–ø–∏—Å–∏: –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ —Ä–µ—à–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏.
üîó –í–∞—à–∞ —É–Ω–∏–∫–∞–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞ –¥–ª—è –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–æ–≤:
https://t.me/${botUsername}?start=${chatId}

üì£ –°–æ–≤–µ—Ç: –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç—É —Å—Å—ã–ª–∫—É –¥–ª—è –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤ ‚Äî —Ä–∞–∑–º–µ—â–∞–π—Ç–µ –µ—ë –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö, –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö –∏–ª–∏ –¥–µ–ª–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–∞–º–∏ –Ω–∞–ø—Ä—è–º—É—é.

‚ú® –ñ–µ–ª–∞–µ–º —É—Å–ø–µ—à–Ω–æ–π —Ä–∞–±–æ—Ç—ã –∏ –±–æ–ª—å—à–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –¥–æ–≤–æ–ª—å–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤!`,
						reply_markup: profileOptions.reply_markup,
					})
				} catch (error) {
					console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞:', error)
					await bot.sendMessage(
						chatId,
						'–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.'
					)
				}
			}

			return NextResponse.json({ success: true })
		}

		return NextResponse.json(
			{ message: 'No relevant data in request' },
			{ status: 400 }
		)
	} catch (error) {
		console.error('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞:', error)
		return NextResponse.json({ error }, { status: 500 })
	}
}
