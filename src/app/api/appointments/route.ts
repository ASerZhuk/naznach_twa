import { NextResponse } from 'next/server'
import { PrismaClient } from '@prisma/client'
import TelegramBot from 'node-telegram-bot-api'
import prisma from '@/app/libs/prismadb'

const prismaClient = new PrismaClient()

const bot = new TelegramBot('7655736393:AAGYAPPjBo1WWKhAXtcUMj0FsTWH35Y7D8g', {
	polling: false,
})

const webAppUrl = 'https://naznach-twa.vercel.app/'

export async function POST(req: Request) {
	try {
		const body = await req.json()
		const { userId, isMaster } = body

		if (!userId) {
			return new NextResponse('UserId is required', { status: 400 })
		}

		const appointments = await prisma.appointments.findMany({
			where: isMaster ? { specialistId: userId } : { clientId: userId },
			orderBy: {
				date: 'desc',
			},
		})

		return NextResponse.json(appointments)
	} catch (error) {
		console.error('Error in appointments API:', error)
		return new NextResponse('Internal error', { status: 500 })
	}
}

// –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å–µ–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
export async function GET(request: Request) {
	try {
		// –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ URL (—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏ –¥–∞—Ç–∞)
		const { searchParams } = new URL(request.url)
		const specialistId = searchParams.get('specialistId')
		const date = searchParams.get('date')

		if (!specialistId || !date) {
			return NextResponse.json(
				{ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞' },
				{ status: 400 }
			)
		}

		// –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –∑–∞–ø–∏—Å–µ–π –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
		const appointments = await prismaClient.appointments.findMany({
			where: {
				specialistId,
				date,
			},
			select: {
				time: true, // –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–µ time, —á—Ç–æ–±—ã –º–∏–Ω–∏–º–∏–∑–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä—ë–º –¥–∞–Ω–Ω—ã—Ö
			},
		})

		return NextResponse.json(appointments)
	} catch (error) {
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–µ–π' },
			{ status: 500 }
		)
	}
}

export async function DELETE(req: Request) {
	try {
		const { searchParams } = new URL(req.url)
		const appointmentId = searchParams.get('id')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ reason –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
		const body = await req.json()
		const { reason } = body

		if (!reason) {
			return NextResponse.json(
				{ error: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É –æ—Ç–º–µ–Ω—ã' },
				{ status: 400 }
			)
		}

		if (!appointmentId) {
			return NextResponse.json(
				{ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞' },
				{ status: 400 }
			)
		}

		const appointmentIdNum = parseInt(appointmentId)
		if (isNaN(appointmentIdNum)) {
			return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' }, { status: 400 })
		}

		// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∑–∞–ø–∏—Å–∏ –ø–µ—Ä–µ–¥ —É–¥–∞–ª–µ–Ω–∏–µ–º
		const appointmentServoces = await prismaClient.appointmentServices.findMany(
			{
				where: { appointmentId: appointmentIdNum },
			}
		)
		const appointment = await prismaClient.appointments.findUnique({
			where: { id: appointmentIdNum },
		})

		if (!appointmentServoces) {
			console.error(`–ó–∞–ø–∏—Å—å —Å ID ${appointmentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
			return NextResponse.json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
		}

		if (!appointment) {
			console.error(`–ó–∞–ø–∏—Å—å —Å ID ${appointmentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
			return NextResponse.json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
		}

		await prismaClient.appointmentServices.deleteMany({
			where: {
				appointmentId: appointmentIdNum,
			},
		})

		// –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
		await prismaClient.appointments.delete({
			where: { id: appointmentIdNum },
		})

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–ª–∏–µ–Ω—Ç—É –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã
		const clientChatId = parseInt(appointment.clientId)
		const masterChatId = parseInt(appointment.specialistId)
		const cancelPhoto = `${webAppUrl}/55.png`
		const messageClient = `‚ùå –í–∞—à–∞ –∑–∞–ø–∏—Å—å –±—ã–ª–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.\n\n üìÜ –î–∞—Ç–∞: ${appointment.date}\n ‚åö –í—Ä–µ–º—è: ${appointment.time}\n üòÄ –ú–∞—Å—Ç–µ—Ä: ${appointment.specialistName} ${appointment.specialistLastName}\n üìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.specialistPhone}\n‚ùó –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: ${reason}`

		if (appointment.clientId !== appointment.specialistId) {
			await bot.sendPhoto(clientChatId, cancelPhoto, {
				caption: messageClient,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
								web_app: { url: `${webAppUrl}` },
							},
						],
					],
				},
			})
		}

		// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –º–∞—Å—Ç–µ—Ä—É –æ –ø—Ä–∏—á–∏–Ω–µ –æ—Ç–º–µ–Ω—ã
		const messageMaster = `‚ùå–û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏.\n\n
		–ö–ª–∏–µ–Ω—Ç ${appointment.firstName} ${appointment.lastName}.\n\n üìÜ –î–∞—Ç–∞: ${appointment.date}\n ‚åö –í—Ä–µ–º—è: ${appointment.time}\n üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: ${appointment.phone}\n‚ùó –ü—Ä–∏—á–∏–Ω–∞ –æ—Ç–º–µ–Ω—ã: ${reason}`

		await bot.sendPhoto(masterChatId, cancelPhoto, {
			caption: messageMaster,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
							web_app: { url: `${webAppUrl}` },
						},
					],
				],
			},
		})

		return NextResponse.json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞' })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏:', error)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏' },
			{ status: 500 }
		)
	}
}

export async function PUT(req: Request) {
	try {
		const { searchParams } = new URL(req.url)
		const appointmentId = searchParams.get('id')

		// –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞ reason –≤ —Ç–µ–ª–µ –∑–∞–ø—Ä–æ—Å–∞
		const body = await req.json()
		const { date, time } = body

		if (!appointmentId) {
			return NextResponse.json(
				{ error: '–ù–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞' },
				{ status: 400 }
			)
		}

		const appointmentIdNum = parseInt(appointmentId)
		if (isNaN(appointmentIdNum)) {
			return NextResponse.json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID' }, { status: 400 })
		}

		const appointment = await prismaClient.appointments.findUnique({
			where: { id: appointmentIdNum },
		})

		if (!appointment) {
			console.error(`–ó–∞–ø–∏—Å—å —Å ID ${appointmentIdNum} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
			return NextResponse.json({ error: '–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞' }, { status: 404 })
		}

		await prismaClient.appointments.update({
			where: { id: appointmentIdNum },
			data: {
				date: date,
				time: time,
			},
		})

		const clientChatId = parseInt(appointment.clientId)
		const masterChatId = parseInt(appointment.specialistId)
		const rewritePhoto = `${webAppUrl}/68.png`

		if (appointment.clientId !== appointment.specialistId) {
			await bot.sendPhoto(clientChatId, rewritePhoto, {
				caption: `üîî –í—ã –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\nüìÜ —Å ${appointment.date} ‚åö –≤ ${appointment.time}.\nüìÜ –Ω–∞ ${date} ‚åö –≤ ${time}\nüòÄ –ú–∞—Å—Ç–µ—Ä: ${appointment.specialistName} ${appointment.specialistLastName}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: ${appointment.specialistPhone}`,
				reply_markup: {
					inline_keyboard: [
						[
							{
								text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
								web_app: { url: `${webAppUrl}` },
							},
						],
					],
				},
			})
		}

		await bot.sendPhoto(masterChatId, rewritePhoto, {
			caption: `üîî –ö–ª–∏–µ–Ω—Ç ${appointment.firstName} ${appointment.lastName} –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω\n\nüìÜ —Å ${appointment.date} ‚åö –≤ ${appointment.time}.\nüìÜ –Ω–∞ ${date} ‚åö –≤ ${time}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: ${appointment.phone}`,
			reply_markup: {
				inline_keyboard: [
					[
						{
							text: '–ü–µ—Ä–µ–π—Ç–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ',
							web_app: { url: `${webAppUrl}` },
						},
					],
				],
			},
		})

		return NextResponse.json({ message: '–ó–∞–ø–∏—Å—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∞' })
	} catch (error) {
		console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏:', error)
		return NextResponse.json(
			{ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∏' },
			{ status: 500 }
		)
	}
}
